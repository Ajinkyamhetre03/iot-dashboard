<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gas Monitoring Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gauge.js/1.3.7/gauge.min.js"></script>

    <script>
      tailwind.config = {
        darkMode: "class",
        theme: {
          extend: {
            colors: {
              primary: "#3B82F6",
              active: "#10B981",
              dark: "#1F2937",
            },
          },
        },
      };
    </script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
      .gauge-container {
        width: 300px;
        height: 300px;
        margin: 0 auto;
        position: relative;
      }

      .gauge-value {
        position: absolute;
        bottom: 50px;
        width: 100%;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
      }

      .status-indicator {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 10px 20px;
        border-radius: 10px;
        display: none;
        z-index: 50;
      }
      
      /* Range slider styling */
      input[type=range] {
        width: 100%;
        height: 10px;
        border-radius: 5px;
        -webkit-appearance: none;
      }
      
      input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        height: 20px;
        width: 20px;
        border-radius: 50%;
        background: #3B82F6;
        cursor: pointer;
      }

      .back-button {
        position: fixed;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;}
        .back-button:hover {
            background-color: #3B82F6;
        }
    </style>
  </head>

  <body
    class="bg-gray-100 dark:bg-gray-900 min-h-screen flex flex-col transition-colors duration-300"
  >
  <a href="/" class="back-button flex items-center justify-center bg-primary dark:bg-gray-700 text-white p-3 rounded-full hover:bg-blue-600 dark:hover:bg-gray-600 transition shadow-lg">
    <i class="fas fa-arrow-left text-xl"></i>
</a>
    <!-- Navbar -->
    <nav class="bg-primary dark:bg-gray-800 text-white p-4 shadow-md">
      <div class="container mx-auto flex justify-between items-center">
        <div class="flex items-center">
          <i class="fas fa-cloud-upload-alt mr-3 text-2xl"></i>
          <h1 class="text-xl font-bold">Smart Gas Monitoring</h1>
        </div>
        <div class="flex items-center space-x-4">
          <h2 class="text-xl font-normal" id="userEmail">Welcome, <%= email %></h2>
          <button
            id="theme-toggle"
            class="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 px-3 py-2 rounded transition flex items-center"
          >
            <i id="theme-icon" class="fas fa-moon dark:fa-sun"></i>
          </button>
          <a
            href="/logout"
            class="bg-red-500 hover:bg-red-600 px-4 py-2 rounded transition"
          >
            <i class="fas fa-sign-out-alt mr-2"></i>Logout
          </a>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="container mx-auto px-4 py-8 flex-grow">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Gas Level Gauge Section -->
        <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
          <h3
            class="text-2xl font-semibold mb-6 text-primary dark:text-blue-300 flex items-center justify-center"
          >
            <i class="fas fa-tachometer-alt mr-3"></i>Current Gas Level
          </h3>
          <div class="gauge-container">
            <canvas id="gas-gauge"></canvas>
            <div
              id="gauge-value"
              class="gauge-value text-gray-700 dark:text-gray-200"
            >
              --
            </div>
          </div>
          <div
            class="text-center mt-4 text-sm text-gray-500 dark:text-gray-400"
          >
            Last updated: <span id="last-updated">--</span>
          </div>
          <div
            class="mt-3 text-center"
          >
            <span id="statusBadge" class="px-4 py-2 rounded-full text-white bg-green-500 inline-block">Normal</span>
          </div>
        </div>

        <!-- Right Column: Controls and Stats -->
        <div class="flex flex-col gap-6">
          <!-- Motor Control Button Section -->
          <div
            class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 flex flex-col justify-center items-center"
          >
            <h3
              class="text-2xl font-semibold mb-6 text-primary dark:text-blue-300 flex items-center justify-center"
            >
              <i class="fas fa-cogs mr-3"></i>Motor Control
            </h3>

            <!-- Motor Toggle Button -->
            <button
              id="motor-toggle"
              class="bg-blue-500 hover:bg-blue-600 text-white text-xl py-6 px-10 rounded-lg shadow-lg flex items-center transition-all"
            >
              <i class="fas fa-cogs mr-3 text-2xl"></i>
              <span id="motor-status">Turn Motor ON</span>
            </button>
            
            <!-- Gas Level Stats -->
            <div class="mt-8 w-full grid grid-cols-3 gap-4">
              <div class="bg-blue-100 dark:bg-blue-900 p-3 rounded-lg">
                <div class="text-sm text-blue-600 dark:text-blue-300">Current</div>
                <div id="currentValue" class="text-2xl font-bold text-gray-800 dark:text-white">0 PPM</div>
              </div>
              <div class="bg-green-100 dark:bg-green-900 p-3 rounded-lg">
                <div class="text-sm text-green-600 dark:text-green-300">Min</div>
                <div id="minValue" class="text-2xl font-bold text-gray-800 dark:text-white">0 PPM</div>
              </div>
              <div class="bg-red-100 dark:bg-red-900 p-3 rounded-lg">
                <div class="text-sm text-red-600 dark:text-red-300">Max</div>
                <div id="maxValue" class="text-2xl font-bold text-gray-800 dark:text-white">0 PPM</div>
              </div>
            </div>
          </div>
          
          <!-- Alert Settings Section -->
          <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
            <h3
              class="text-2xl font-semibold mb-6 text-primary dark:text-blue-300 flex items-center justify-center"
            >
              <i class="fas fa-bell mr-3"></i>Alert Settings
            </h3>
            
            <!-- Threshold settings -->
            <div class="mb-6">
              <label class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">
                Alert Threshold (PPM) - Get notified when gas level exceeds this value
              </label>
              <div class="flex items-center gap-4">
                <input 
                  type="range" 
                  id="threshold-slider" 
                  min="0" 
                  max="1000" 
                  value="<%= threshold %>" 
                  class="flex-grow"
                >
                <span 
                  id="threshold-value" 
                  class="text-lg font-semibold text-primary dark:text-blue-300 min-w-[4rem]"
                >
                  <%= threshold %> PPM
                </span>
              </div>
            </div>
            

            
            <div class="flex gap-4">
              <button
                id="save-threshold"
                class="bg-green-500 hover:bg-green-600 text-white py-3 px-6 rounded-lg shadow-md flex-1 flex items-center justify-center"
              >
                <i class="fas fa-save mr-2"></i>Save Threshold
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Status Indicator -->
      <div id="status-indicator" class="status-indicator">Status updated</div>
    </main>

    <!-- Footer -->
    <footer class="bg-dark dark:bg-black text-white py-6 mt-8">
      <div class="container mx-auto flex justify-between items-center">
        <div>
          <p>&copy; 2025 Smart Gas Monitoring System | Dashboard v2.0</p>
        </div>
        <div class="flex space-x-4">
          <a href="#" class="hover:text-primary transition">
            <i class="fab fa-github"></i>
          </a>
          <a href="#" class="hover:text-primary transition">
            <i class="fab fa-twitter"></i>
          </a>
        </div>
      </div>
    </footer>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        // Initialize Socket.io connection
        const socket = io();
        let motorState = false;
        
        // Track min/max values
        let minGasLevel = Infinity;
        let maxGasLevel = -Infinity;
        
        socket.on("connect", () => {
          console.log("âœ… Socket connected");
        });

        // Initialize gauge
        const gauge = new Gauge(
          document.getElementById("gas-gauge")
        ).setOptions({
          angle: 0,
          lineWidth: 0.44,
          radiusScale: 1,
          pointer: {
            length: 0.6,
            strokeWidth: 0.035,
            color: "#000000",
          },
          limitMax: false,
          limitMin: false,
          colorStart: "#6FADCF",
          colorStop: "#8FC0DA",
          strokeColor: "#E0E0E0",
          generateGradient: true,
          highDpiSupport: true,
          staticLabels: {
            font: "12px sans-serif",
            labels: [0, 200, 400, 600, 800, 1000],
            color: "#000000",
            fractionDigits: 0,
          },
          staticZones: [
            { strokeStyle: "#2ecc71", min: 0, max: 200 },    // Normal - Green
            { strokeStyle: "#f39c12", min: 200, max: 400 },  // Moderate - Yellow
            { strokeStyle: "#e67e22", min: 400, max: 700 },  // Warning - Orange
            { strokeStyle: "#e74c3c", min: 700, max: 1000 }, // Danger - Red
          ],
        });
        gauge.maxValue = 1000;
        gauge.setMinValue(0);
        gauge.animationSpeed = 32;
        gauge.set(0);

        // Function to update gas level display
        function updateGasLevel(value) {
          // Update gauge
          gauge.set(value);
          document.getElementById("gauge-value").textContent = `${Math.round(value)} PPM`;
          document.getElementById("currentValue").textContent = `${Math.round(value)} PPM`;
          
          // Update min/max values
          if (value < minGasLevel) {
            minGasLevel = value;
            document.getElementById("minValue").textContent = `${Math.round(minGasLevel)} PPM`;
          }
          
          if (value > maxGasLevel) {
            maxGasLevel = value;
            document.getElementById("maxValue").textContent = `${Math.round(maxGasLevel)} PPM`;
          }
          
          // Update status badge
          const statusBadge = document.getElementById("statusBadge");
          if (value < 200) {
            statusBadge.className = 'px-4 py-2 rounded-full text-white bg-green-500';
            statusBadge.textContent = 'Normal';
          } else if (value < 400) {
            statusBadge.className = 'px-4 py-2 rounded-full text-white bg-yellow-500';
            statusBadge.textContent = 'Moderate';
          } else if (value < 700) {
            statusBadge.className = 'px-4 py-2 rounded-full text-white bg-orange-500';
            statusBadge.textContent = 'Warning';
          } else {
            statusBadge.className = 'px-4 py-2 rounded-full text-white bg-red-500';
            statusBadge.textContent = 'Danger';
          }
          
          // Update last updated time
          const now = new Date();
          document.getElementById("last-updated").textContent = now.toLocaleTimeString();
        }

        // Listen for gas sensor updates
        socket.on("gasSensor", (data) => {
          if (data && typeof data.gasLevel !== 'undefined') {
            const gasValue = parseFloat(data.gasLevel);
            updateGasLevel(gasValue);
            showStatus("Gas level data updated");
          }
        });

        // Motor Toggle Button
        document.getElementById("motor-toggle").addEventListener("click", function () {
          motorState = !motorState;
          const button = document.getElementById("motor-toggle");
          const statusText = document.getElementById("motor-status");

          if (motorState) {
            button.classList.remove("bg-blue-500", "hover:bg-blue-600");
            button.classList.add("bg-red-500", "hover:bg-red-600");
            statusText.textContent = "Turn Motor OFF";

            // Send control message to server
            $.ajax({
              url: "/dashboard/gasSensor",
              method: "POST",
              data: {
                state: "on",
              },
              success: function (response) {
                showStatus("Motor turned ON");
              },
              error: function () {
                showStatus("Error turning motor ON", true);
              },
            });
          } else {
            button.classList.remove("bg-red-500", "hover:bg-red-600");
            button.classList.add("bg-blue-500", "hover:bg-blue-600");
            statusText.textContent = "Turn Motor ON";

            // Send control message to server
            $.ajax({
              url: "/dashboard/gasSensor",
              method: "POST",
              data: {
                state: "off",
              },
              success: function (response) {
                showStatus("Motor turned OFF");
              },
              error: function () {
                showStatus("Error turning motor OFF", true);
              },
            });
          }
        });
        
        // Threshold slider functionality
        const thresholdSlider = document.getElementById('threshold-slider');
        const thresholdValue = document.getElementById('threshold-value');
        
        thresholdSlider.addEventListener('input', function() {
          thresholdValue.textContent = this.value + ' PPM';
        });
        
        // Save threshold button
        document.getElementById('save-threshold').addEventListener('click', function() {
          const newThreshold = thresholdSlider.value;
          
          $.ajax({
            url: "/dashboard/update-gas-threshold",
            method: "POST",
            data: {
              threshold: newThreshold,
            },
            success: function(response) {
              showStatus(`Alert threshold updated to ${newThreshold} PPM`);
            },
            error: function(xhr) {
              const errorMsg = xhr.responseJSON ? xhr.responseJSON.message : 'Error updating threshold';
              showStatus(errorMsg, true);
            }
          });
        });
        

        // Handle error messages from the server
        socket.on('error', (errorData) => {
          console.error("Error:", errorData.message);
          showStatus("Error: " + errorData.message, true);
        });

        // Theme Toggle Functionality
        const themeToggle = document.getElementById("theme-toggle");
        const themeIcon = document.getElementById("theme-icon");

        // Check for saved theme preference or system preference
        const savedTheme = localStorage.getItem("theme");
        const systemPrefersDark = window.matchMedia("(prefers-color-scheme: dark)");

        function setTheme(theme) {
          if (theme === "dark") {
            document.documentElement.classList.add("dark");
            localStorage.setItem("theme", "dark");
            themeIcon.classList.remove("fa-moon");
            themeIcon.classList.add("fa-sun");
          } else {
            document.documentElement.classList.remove("dark");
            localStorage.setItem("theme", "light");
            themeIcon.classList.remove("fa-sun");
            themeIcon.classList.add("fa-moon");
          }
        }

        // Initial theme setup
        if (savedTheme) {
          setTheme(savedTheme);
        } else if (systemPrefersDark.matches) {
          setTheme("dark");
        }

        // Theme toggle event listener
        themeToggle.addEventListener("click", () => {
          const currentTheme = document.documentElement.classList.contains("dark")
            ? "dark"
            : "light";
          setTheme(currentTheme === "dark" ? "light" : "dark");
        });

        // Status indicator function
        function showStatus(message, isError = false) {
          const indicator = document.getElementById("status-indicator");
          indicator.textContent = message;

          if (isError) {
            indicator.classList.add("bg-red-500");
          } else {
            indicator.classList.remove("bg-red-500");
          }

          indicator.style.display = "block";
          setTimeout(() => {
            indicator.style.display = "none";
          }, 3000);
        }
      });
    </script>
  </body>
</html>