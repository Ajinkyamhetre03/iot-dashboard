<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PIR Smart Light Control</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            'primary': '#3B82F6',
            'active': '#10B981',
            'dark': '#1F2937'
          }
        }
      }
    }
  </script>
  
  <style>
    .device-card {
      transition: transform 0.3s ease;
    }

    .device-card:hover {
      transform: scale(1.05);
    }

    .light-toggle:checked + .light-label {
      background-color: #10B981 !important;
      color: white !important;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .bulb {
      transition: all 0.5s ease;
    }
    
    .bulb.on {
      filter: drop-shadow(0 0 30px #FFC107);
      animation: flicker 2s ease-in-out infinite alternate;
    }
    
    @keyframes flicker {
      0% { opacity: 0.94; }
      25% { opacity: 0.98; }
      50% { opacity: 0.95; }
      75% { opacity: 0.99; }
      100% { opacity: 1; }
    }
    
    .status-indicator {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 12px 24px;
      border-radius: 50px;
      display: none;
      z-index: 50;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
    
    .main-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 70vh;
    }

    .back-button {
        position: fixed;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;}
        .back-button:hover {
            background-color: #3B82F6;
        }
  </style>
</head>

<body class="bg-gray-50 dark:bg-gray-900 min-h-screen flex flex-col transition-colors duration-300">

  <a href="/" class="back-button flex items-center justify-center bg-primary dark:bg-gray-700 text-white p-3 rounded-full hover:bg-blue-600 dark:hover:bg-gray-600 transition shadow-lg">
    <i class="fas fa-arrow-left text-xl"></i>
</a>
  <!-- Navbar -->

  <nav class="bg-primary dark:bg-gray-800 text-white p-4 shadow-md">
    <div class="container mx-auto flex justify-between items-center">
      <div class="flex items-center">
        <i class="fas fa-lightbulb mr-3 text-2xl text-yellow-300"></i>
        <h1 class="text-xl font-bold">PIR Smart Light Control</h1>
      </div>
      <div class="flex items-center space-x-4">
        <h2 class="text-lg font-medium">Welcome, <%= email %></h2>
        <button id="theme-toggle" class="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 px-3 py-2 rounded-full transition flex items-center">
          <i id="theme-icon" class="fas fa-moon dark:fa-sun"></i>
        </button>
        <a href="/logout" class="bg-red-500 hover:bg-red-600 px-4 py-2 rounded-full transition flex items-center">
          <i class="fas fa-sign-out-alt mr-2"></i>Logout
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-8 flex-grow">
    <div class="main-container">
      <div class="bg-white dark:bg-gray-800 shadow-xl rounded-2xl p-8 w-full max-w-md text-center transition-all duration-300">
        <h3 class="text-2xl font-semibold mb-8 text-primary dark:text-blue-300 flex items-center justify-center">
          <i class="fas fa-sensor mr-3"></i>PIR Motion Sensor Light
        </h3>
        
        <!-- Light Bulb Visualization -->
        <div class="flex justify-center mb-10">
          <div class="relative w-48 h-48 flex items-center justify-center">
            <i id="bulb" class="fas fa-lightbulb text-9xl <%= lightStatus ? 'text-yellow-400 bulb on' : 'text-gray-400 bulb' %>"></i>
          </div>
        </div>
        
        <!-- Status Text -->
        <div class="text-xl font-medium mb-8 text-center">
          <span id="status-text" class="<%= lightStatus ? 'text-green-500 dark:text-green-400' : 'text-red-500 dark:text-red-400' %>">
            Light is currently <%= lightStatus ? 'ON' : 'OFF' %>
          </span>
        </div>
        
        <!-- Light Control Toggle -->
        <div class="device-card relative mx-auto max-w-xs">
          <input type="checkbox" id="light-toggle" class="hidden light-toggle" <%= lightStatus ? 'checked' : '' %>>
          <label for="light-toggle" class="light-label block cursor-pointer rounded-full p-5 text-center transition-all duration-300 
                    bg-gray-200 dark:bg-gray-700 hover:bg-primary hover:text-white dark:hover:bg-blue-600 shadow-md">
            <i class="fas fa-power-off text-4xl mb-2 block"></i>
            <span id="toggle-text" class="text-lg font-medium"><%= lightStatus ? 'Turn Off' : 'Turn On' %></span>
          </label>
        </div>
      </div>
    </div>
    
    <!-- Status Indicator -->
    <div id="status-indicator" class="status-indicator">
      <i class="fas fa-circle-check mr-2"></i> Light status updated
    </div>
  </main>
  
  <!-- Footer -->
  <footer class="bg-dark dark:bg-black text-white py-4 mt-auto">
    <div class="container mx-auto flex justify-center items-center px-4 text-center">
      <div>
        <p>&copy; 2025 PIR Smart Light Control. All rights reserved.</p>
        <div class="flex space-x-6 mt-2 justify-center">
          <a href="#" class="hover:text-primary transition">
            <i class="fab fa-facebook-f"></i>
          </a>
          <a href="#" class="hover:text-primary transition">
            <i class="fab fa-twitter"></i>
          </a>
          <a href="#" class="hover:text-primary transition">
            <i class="fab fa-instagram"></i>
          </a>
        </div>
      </div>
    </div>
  </footer>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const lightToggle = document.getElementById('light-toggle');
    const bulb = document.getElementById('bulb');
    const toggleText = document.getElementById('toggle-text');
    const statusText = document.getElementById('status-text');
    const statusIndicator = document.getElementById('status-indicator');
    
    // Initialize status from server
    let lightStatus = <%= lightStatus ? 'true' : 'false' %>;
    
    // Handle toggle button click
    lightToggle.addEventListener('change', () => {
      const newStatus = lightToggle.checked;
      
      // Send toggle request to the server
      fetch(`/dashboard/toggle?status=${newStatus ? 'on' : 'off'}`)
        .then(response => response.json())
        .then(data => {
          if (!data.success) {
            console.error('Failed to toggle light');
            lightToggle.checked = lightStatus; // Revert if failed
          } else {
            // Show status indicator
            statusIndicator.innerHTML = `<i class="fas fa-${newStatus ? 'lightbulb' : 'lightbulb-slash'} mr-2"></i> Light turned ${newStatus ? 'on' : 'off'}`;
            statusIndicator.style.display = 'block';
            setTimeout(() => {
              statusIndicator.style.display = 'none';
            }, 3000);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          lightToggle.checked = lightStatus; // Revert if error
          statusIndicator.innerHTML = '<i class="fas fa-circle-exclamation mr-2"></i> Failed to update light';
          statusIndicator.style.display = 'block';
          setTimeout(() => {
            statusIndicator.style.display = 'none';
          }, 3000);
        });
    });
    
    // Listen for light status updates from the server
    socket.on('pir', (status) => {
      console.log('Received status update:', status);
      
      // Convert to boolean if not already
      if (typeof status === 'object' && status !== null) {
        // If it's an object, try to find a status property
        lightStatus = status.status || status.value || status.state || false;
      } else {
        lightStatus = Boolean(status);
      }
      
      // Update UI
      updateUI(lightStatus);
    });
    
    // Update all UI elements based on light status
    function updateUI(status) {
      lightToggle.checked = status;
      
      if (status) {
        bulb.classList.add('text-yellow-400', 'on');
        bulb.classList.remove('text-gray-400');
        toggleText.textContent = 'Turn Off';
        statusText.textContent = 'Light is currently ON';
        statusText.classList.remove('text-red-500', 'dark:text-red-400');
        statusText.classList.add('text-green-500', 'dark:text-green-400');
      } else {
        bulb.classList.remove('text-yellow-400', 'on');
        bulb.classList.add('text-gray-400');
        toggleText.textContent = 'Turn On';
        statusText.textContent = 'Light is currently OFF';
        statusText.classList.remove('text-green-500', 'dark:text-green-400');
        statusText.classList.add('text-red-500', 'dark:text-red-400');
      }
    }
    
    // Theme Toggle Functionality
    const themeToggle = document.getElementById('theme-toggle');
    const themeIcon = document.getElementById('theme-icon');

    // Check for saved theme preference or system preference
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)');

    function setTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
        themeIcon.classList.remove('fa-moon');
        themeIcon.classList.add('fa-sun');
      } else {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
        themeIcon.classList.remove('fa-sun');
        themeIcon.classList.add('fa-moon');
      }
    }

    // Initial theme setup
    if (savedTheme) {
      setTheme(savedTheme);
    } else if (systemPrefersDark.matches) {
      setTheme('dark');
    }

    // Theme toggle event listener
    themeToggle.addEventListener('click', () => {
      const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      setTheme(currentTheme === 'dark' ? 'light' : 'dark');
    });
    
    // Handle socket connection errors
    socket.on('connect_error', (error) => {
      console.error('Socket connection error:', error);
    });
    
    socket.on('error', (data) => {
      console.error('Socket error:', data.message);
    });
  </script>
</body>
</html>